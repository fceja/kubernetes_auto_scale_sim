# Stage 1: Build Go binary
FROM arm64v8/golang:alpine3.19 AS builder

# Set working directory inside temp container
WORKDIR /app

# Copy source code into container
COPY . .

# Build Go binary
RUN go build -o main main.go

# Stage 2: OpenJDK binaries
FROM arm64v8/eclipse-temurin:22.0.2_9-jdk

# NOTE - Kafka 3.4.1 supports zookeeper 3.9.2
# NOTE - Kafka versions after 3.4.1 no longer support zookeeper

# Set environment variables
ENV KAFKA_VERSION=3.4.1 \
    SCALA_VERSION=2.13 \
    KAFKA_HOME=/app \
    KAFKA_DATA_DIR=/app/data \
    KAFKA_LOG_DIR=/app/logs \
    KAFKA_HOSTNAME=kafka-server \
    KAFKA_SERVER_PORT=9092 \
    ZOOKEEPER_HOSTNAME=zookeeper \
    ZOOKEEPER_SERVER_PORT=2181 \
    INIT_FILE_PATH=init-kafka-server.kubernetes.sh

# Install required packages and clean up
RUN apt-get update && apt-get install -y wget curl gnupg netcat-openbsd iputils-ping \
    && wget https://archive.apache.org/dist/kafka/${KAFKA_VERSION}/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz \
    && tar -xzf kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz -C /opt \
    && mv /opt/kafka_${SCALA_VERSION}-${KAFKA_VERSION} ${KAFKA_HOME} \
    && rm kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz \
    && apt-get remove -y wget gnupg curl \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working dir
WORKDIR ${KAFKA_HOME}

# Create directories for Kafka data and logs
RUN mkdir -p ${KAFKA_DATA_DIR} ${KAFKA_LOG_DIR}

# Expose Kafka port
EXPOSE 9092

# Copy Go binary from builder stage
COPY --from=builder /app .

# Copy Kafka server config file
COPY /server.kubernetes.properties ${KAFKA_HOME}/config/server.kubernetes.properties

# Copy init script and make executable
COPY init-kafka-server.kubernetes.sh .
RUN chmod +x init-kafka-server.kubernetes.sh

# Define entrypoint to Kafka server init script
ENTRYPOINT ["sh", "-c", "/${KAFKA_HOME}/init-kafka-server.kubernetes.sh"]
